using System;
using NBitcoin;

namespace BitcoinAddress
{
    public class Program
    {
        private static void Main(string[] args)
        {
            var privateKey = new Key();
            var publicKey = privateKey.PubKey;

            // get your bitcoin address from your public key
            // and the network on which this address should be used.
            var bitcoinAddress = publicKey.GetAddress(Network.Main);

            // a bitcoin address is made up of a version byte (which is different on both networks) and your public key’s hash bytes.
            // Both of these bytes are concatenated and then encoded into a Base58Check
            var publicKeyHash = publicKey.Hash;
            var addressFromHash = publicKeyHash.GetAddress(Network.Main);

            Console.WriteLine(bitcoinAddress == addressFromHash);

            // A public key hash is generated by using a SHA256 hash on the public key, then a RIPEMD160 hash on the result, using Big Endian notation.
            // The function could look like this: RIPEMD160(SHA256(pubkey))

            // Base58Check encoding features:
            // checksums to prevent typos
            // lack ambiguous chars: such as "0" and "O"
            // consistent way to determine network of address (main/testnet)

            Console.ReadLine();
        }
    }
}
